<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
  <duplication lines="52" tokens="99">
    <file path="/opt/test/system/database/drivers/cubrid/cubrid_driver.php" line="497"/>
    <file path="/opt/test/system/database/drivers/pdo/pdo_driver.php" line="521"/>
    <codefragment>    function _escape_identifiers($item)
    {
        if ($this-&gt;_escape_char == '')
        {
            return $item;
        }

        foreach ($this-&gt;_reserved_identifiers as $id)
        {
            if (strpos($item, '.'.$id) !== FALSE)
            {
                $str = $this-&gt;_escape_char. str_replace('.', $this-&gt;_escape_char.'.', $item);

                // remove duplicates if the user already included the escape
                return preg_replace('/['.$this-&gt;_escape_char.']+/', $this-&gt;_escape_char, $str);
            }
        }

        if (strpos($item, '.') !== FALSE)
        {
            $str = $this-&gt;_escape_char.str_replace('.', $this-&gt;_escape_char.'.'.$this-&gt;_escape_char, $item).$this-&gt;_escape_char;
        }
        else
        {
            $str = $this-&gt;_escape_char.$item.$this-&gt;_escape_char;
        }

        // remove duplicates if the user already included the escape
        return preg_replace('/['.$this-&gt;_escape_char.']+/', $this-&gt;_escape_char, $str);
    }

    // --------------------------------------------------------------------

    /**
     * From Tables
     *
     * This function implicitly groups FROM tables so there is no confusion
     * about operator precedence in harmony with SQL standards
     *
     * @access    public
     * @param    type
     * @return    type
     */
    function _from_tables($tables)
    {
        if ( ! is_array($tables))
        {
            $tables = array($tables);
        }

        return '('.implode(', ', $tables).')';
    }
</codefragment>
  </duplication>
  <duplication lines="85" tokens="147">
    <file path="/opt/test/system/database/drivers/cubrid/cubrid_driver.php" line="625"/>
    <file path="/opt/test/system/database/drivers/pdo/pdo_driver.php" line="630"/>
    <codefragment>            $valstr[] = sprintf('"%s" = %s', $key, $val);
        }

        $limit = ( ! $limit) ? '' : ' LIMIT '.$limit;

        $orderby = (count($orderby) &gt;= 1)?' ORDER BY '.implode(", ", $orderby):'';

        $sql = "UPDATE ".$table." SET ".implode(', ', $valstr);

        $sql .= ($where != '' AND count($where) &gt;=1) ? " WHERE ".implode(" ", $where) : '';

        $sql .= $orderby.$limit;

        return $sql;
    }

    // --------------------------------------------------------------------


    /**
     * Update_Batch statement
     *
     * Generates a platform-specific batch update string from the supplied data
     *
     * @access    public
     * @param    string    the table name
     * @param    array    the update data
     * @param    array    the where clause
     * @return    string
     */
    function _update_batch($table, $values, $index, $where = NULL)
    {
        $ids = array();
        $where = ($where != '' AND count($where) &gt;=1) ? implode(" ", $where).' AND ' : '';

        foreach ($values as $key =&gt; $val)
        {
            $ids[] = $val[$index];

            foreach (array_keys($val) as $field)
            {
                if ($field != $index)
                {
                    $final[$field][] = 'WHEN '.$index.' = '.$val[$index].' THEN '.$val[$field];
                }
            }
        }

        $sql = "UPDATE ".$table." SET ";
        $cases = '';

        foreach ($final as $k =&gt; $v)
        {
            $cases .= $k.' = CASE '."\n";
            foreach ($v as $row)
            {
                $cases .= $row."\n";
            }

            $cases .= 'ELSE '.$k.' END, ';
        }

        $sql .= substr($cases, 0, -2);

        $sql .= ' WHERE '.$where.$index.' IN ('.implode(',', $ids).')';

        return $sql;
    }

    // --------------------------------------------------------------------


    /**
     * Truncate statement
     *
     * Generates a platform-specific truncate string from the supplied data
     * If the database does not support the truncate() command
     * This function maps to "DELETE FROM table"
     *
     * @access    public
     * @param    string    the table name
     * @return    string
     */
    function _truncate($table)
    {
</codefragment>
  </duplication>
  <duplication lines="37" tokens="73">
    <file path="/opt/test/system/database/drivers/pdo/pdo_forge.php" line="105"/>
    <file path="/opt/test/system/database/drivers/mysqli/mysqli_forge.php" line="89"/>
    <codefragment>                $sql .=  ' '.$attributes['TYPE'];

                if (array_key_exists('CONSTRAINT', $attributes))
                {
                    $sql .= '('.$attributes['CONSTRAINT'].')';
                }

                if (array_key_exists('UNSIGNED', $attributes) &amp;&amp; $attributes['UNSIGNED'] === TRUE)
                {
                    $sql .= ' UNSIGNED';
                }

                if (array_key_exists('DEFAULT', $attributes))
                {
                    $sql .= ' DEFAULT \''.$attributes['DEFAULT'].'\'';
                }

                if (array_key_exists('NULL', $attributes) &amp;&amp; $attributes['NULL'] === TRUE)
                {
                    $sql .= ' NULL';
                }
                else
                {
                    $sql .= ' NOT NULL';
                }

                if (array_key_exists('AUTO_INCREMENT', $attributes) &amp;&amp; $attributes['AUTO_INCREMENT'] === TRUE)
                {
                    $sql .= ' AUTO_INCREMENT';
                }
            }

            // don't add a comma on the end of the last field
            if (++$current_field_count &lt; count($fields))
            {
                $sql .= ',';
            }
</codefragment>
  </duplication>
  <duplication lines="83" tokens="115">
    <file path="/opt/test/system/database/drivers/cubrid/cubrid_driver.php" line="483"/>
    <file path="/opt/test/system/database/drivers/mysqli/mysqli_driver.php" line="471"/>
    <codefragment>        return cubrid_errno($this-&gt;conn_id);
    }

    // --------------------------------------------------------------------

    /**
     * Escape the SQL Identifiers
     *
     * This function escapes column and table names
     *
     * @access    private
     * @param    string
     * @return    string
     */
    function _escape_identifiers($item)
    {
        if ($this-&gt;_escape_char == '')
        {
            return $item;
        }

        foreach ($this-&gt;_reserved_identifiers as $id)
        {
            if (strpos($item, '.'.$id) !== FALSE)
            {
                $str = $this-&gt;_escape_char. str_replace('.', $this-&gt;_escape_char.'.', $item);

                // remove duplicates if the user already included the escape
                return preg_replace('/['.$this-&gt;_escape_char.']+/', $this-&gt;_escape_char, $str);
            }
        }

        if (strpos($item, '.') !== FALSE)
        {
            $str = $this-&gt;_escape_char.str_replace('.', $this-&gt;_escape_char.'.'.$this-&gt;_escape_char, $item).$this-&gt;_escape_char;
        }
        else
        {
            $str = $this-&gt;_escape_char.$item.$this-&gt;_escape_char;
        }

        // remove duplicates if the user already included the escape
        return preg_replace('/['.$this-&gt;_escape_char.']+/', $this-&gt;_escape_char, $str);
    }

    // --------------------------------------------------------------------

    /**
     * From Tables
     *
     * This function implicitly groups FROM tables so there is no confusion
     * about operator precedence in harmony with SQL standards
     *
     * @access    public
     * @param    type
     * @return    type
     */
    function _from_tables($tables)
    {
        if ( ! is_array($tables))
        {
            $tables = array($tables);
        }

        return '('.implode(', ', $tables).')';
    }

    // --------------------------------------------------------------------

    /**
     * Insert statement
     *
     * Generates a platform-specific insert string from the supplied data
     *
     * @access    public
     * @param    string    the table name
     * @param    array    the insert keys
     * @param    array    the insert values
     * @return    string
     */
    function _insert($table, $keys, $values)
    {
        return "INSERT INTO ".$table." (\"".implode('", "', $keys)."\") VALUES (".implode(', ', $values).")";
</codefragment>
  </duplication>
  <duplication lines="138" tokens="226">
    <file path="/opt/test/system/database/drivers/pdo/pdo_driver.php" line="626"/>
    <file path="/opt/test/system/database/drivers/mysqli/mysqli_driver.php" line="608"/>
    <codefragment>    function _update($table, $values, $where, $orderby = array(), $limit = FALSE)
    {
        foreach ($values as $key =&gt; $val)
        {
            $valstr[] = $key." = ".$val;
        }

        $limit = ( ! $limit) ? '' : ' LIMIT '.$limit;

        $orderby = (count($orderby) &gt;= 1)?' ORDER BY '.implode(", ", $orderby):'';

        $sql = "UPDATE ".$table." SET ".implode(', ', $valstr);

        $sql .= ($where != '' AND count($where) &gt;=1) ? " WHERE ".implode(" ", $where) : '';

        $sql .= $orderby.$limit;

        return $sql;
    }
    
    // --------------------------------------------------------------------

    /**
     * Update_Batch statement
     *
     * Generates a platform-specific batch update string from the supplied data
     *
     * @access    public
     * @param    string    the table name
     * @param    array    the update data
     * @param    array    the where clause
     * @return    string
     */
    function _update_batch($table, $values, $index, $where = NULL)
    {
        $ids = array();
        $where = ($where != '' AND count($where) &gt;=1) ? implode(" ", $where).' AND ' : '';

        foreach ($values as $key =&gt; $val)
        {
            $ids[] = $val[$index];

            foreach (array_keys($val) as $field)
            {
                if ($field != $index)
                {
                    $final[$field][] =  'WHEN '.$index.' = '.$val[$index].' THEN '.$val[$field];
                }
            }
        }

        $sql = "UPDATE ".$table." SET ";
        $cases = '';

        foreach ($final as $k =&gt; $v)
        {
            $cases .= $k.' = CASE '."\n";
            foreach ($v as $row)
            {
                $cases .= $row."\n";
            }

            $cases .= 'ELSE '.$k.' END, ';
        }

        $sql .= substr($cases, 0, -2);

        $sql .= ' WHERE '.$where.$index.' IN ('.implode(',', $ids).')';

        return $sql;
    }


    // --------------------------------------------------------------------

    /**
     * Truncate statement
     *
     * Generates a platform-specific truncate string from the supplied data
     * If the database does not support the truncate() command
     * This function maps to "DELETE FROM table"
     *
     * @access    public
     * @param    string    the table name
     * @return    string
     */
    function _truncate($table)
    {
        return $this-&gt;_delete($table);
    }

    // --------------------------------------------------------------------

    /**
     * Delete statement
     *
     * Generates a platform-specific delete string from the supplied data
     *
     * @access    public
     * @param    string    the table name
     * @param    array    the where clause
     * @param    string    the limit clause
     * @return    string
     */
    function _delete($table, $where = array(), $like = array(), $limit = FALSE)
    {
        $conditions = '';

        if (count($where) &gt; 0 OR count($like) &gt; 0)
        {
            $conditions = "\nWHERE ";
            $conditions .= implode("\n", $this-&gt;ar_where);

            if (count($where) &gt; 0 &amp;&amp; count($like) &gt; 0)
            {
                $conditions .= " AND ";
            }
            $conditions .= implode("\n", $like);
        }

        $limit = ( ! $limit) ? '' : ' LIMIT '.$limit;

        return "DELETE FROM ".$table.$conditions.$limit;
    }

    // --------------------------------------------------------------------

    /**
     * Limit string
     *
     * Generates a platform-specific LIMIT clause
     *
     * @access    public
     * @param    string    the sql query string
     * @param    integer    the number of rows to limit the query to
     * @param    integer    the offset value
     * @return    string
     */
</codefragment>
  </duplication>
  <duplication lines="101" tokens="125">
    <file path="/opt/test/system/database/drivers/cubrid/cubrid_driver.php" line="483"/>
    <file path="/opt/test/system/database/drivers/sqlite/sqlite_driver.php" line="439"/>
    <codefragment>        return cubrid_errno($this-&gt;conn_id);
    }

    // --------------------------------------------------------------------

    /**
     * Escape the SQL Identifiers
     *
     * This function escapes column and table names
     *
     * @access    private
     * @param    string
     * @return    string
     */
    function _escape_identifiers($item)
    {
        if ($this-&gt;_escape_char == '')
        {
            return $item;
        }

        foreach ($this-&gt;_reserved_identifiers as $id)
        {
            if (strpos($item, '.'.$id) !== FALSE)
            {
                $str = $this-&gt;_escape_char. str_replace('.', $this-&gt;_escape_char.'.', $item);

                // remove duplicates if the user already included the escape
                return preg_replace('/['.$this-&gt;_escape_char.']+/', $this-&gt;_escape_char, $str);
            }
        }

        if (strpos($item, '.') !== FALSE)
        {
            $str = $this-&gt;_escape_char.str_replace('.', $this-&gt;_escape_char.'.'.$this-&gt;_escape_char, $item).$this-&gt;_escape_char;
        }
        else
        {
            $str = $this-&gt;_escape_char.$item.$this-&gt;_escape_char;
        }

        // remove duplicates if the user already included the escape
        return preg_replace('/['.$this-&gt;_escape_char.']+/', $this-&gt;_escape_char, $str);
    }

    // --------------------------------------------------------------------

    /**
     * From Tables
     *
     * This function implicitly groups FROM tables so there is no confusion
     * about operator precedence in harmony with SQL standards
     *
     * @access    public
     * @param    type
     * @return    type
     */
    function _from_tables($tables)
    {
        if ( ! is_array($tables))
        {
            $tables = array($tables);
        }

        return '('.implode(', ', $tables).')';
    }

    // --------------------------------------------------------------------

    /**
     * Insert statement
     *
     * Generates a platform-specific insert string from the supplied data
     *
     * @access    public
     * @param    string    the table name
     * @param    array    the insert keys
     * @param    array    the insert values
     * @return    string
     */
    function _insert($table, $keys, $values)
    {
        return "INSERT INTO ".$table." (\"".implode('", "', $keys)."\") VALUES (".implode(', ', $values).")";
    }

    // --------------------------------------------------------------------


    /**
     * Replace statement
     *
     * Generates a platform-specific replace string from the supplied data
     *
     * @access    public
     * @param    string    the table name
     * @param    array    the insert keys
     * @param    array    the insert values
     * @return    string
     */
    function _replace($table, $keys, $values)
    {
</codefragment>
  </duplication>
  <duplication lines="53" tokens="73">
    <file path="/opt/test/system/database/drivers/mysqli/mysqli_driver.php" line="590"/>
    <file path="/opt/test/system/database/drivers/sqlite/sqlite_driver.php" line="521"/>
    <codefragment>        return "REPLACE INTO ".$table." (".implode(', ', $keys).") VALUES (".implode(', ', $values).")";
    }
    
    // --------------------------------------------------------------------

    /**
     * Update statement
     *
     * Generates a platform-specific update string from the supplied data
     *
     * @access    public
     * @param    string    the table name
     * @param    array    the update data
     * @param    array    the where clause
     * @param    array    the orderby clause
     * @param    array    the limit clause
     * @return    string
     */
    function _update($table, $values, $where, $orderby = array(), $limit = FALSE)
    {
        foreach ($values as $key =&gt; $val)
        {
            $valstr[] = $key." = ".$val;
        }

        $limit = ( ! $limit) ? '' : ' LIMIT '.$limit;

        $orderby = (count($orderby) &gt;= 1)?' ORDER BY '.implode(", ", $orderby):'';

        $sql = "UPDATE ".$table." SET ".implode(', ', $valstr);

        $sql .= ($where != '' AND count($where) &gt;=1) ? " WHERE ".implode(" ", $where) : '';

        $sql .= $orderby.$limit;

        return $sql;
    }

    // --------------------------------------------------------------------

    /**
     * Update_Batch statement
     *
     * Generates a platform-specific batch update string from the supplied data
     *
     * @access    public
     * @param    string    the table name
     * @param    array    the update data
     * @param    array    the where clause
     * @return    string
     */
    function _update_batch($table, $values, $index, $where = NULL)
    {
</codefragment>
  </duplication>
  <duplication lines="72" tokens="70">
    <file path="/opt/test/system/database/drivers/pdo/pdo_driver.php" line="695"/>
    <file path="/opt/test/system/database/drivers/sqlite/sqlite_driver.php" line="556"/>
    <codefragment>        return $sql;
    }


    // --------------------------------------------------------------------

    /**
     * Truncate statement
     *
     * Generates a platform-specific truncate string from the supplied data
     * If the database does not support the truncate() command
     * This function maps to "DELETE FROM table"
     *
     * @access    public
     * @param    string    the table name
     * @return    string
     */
    function _truncate($table)
    {
        return $this-&gt;_delete($table);
    }

    // --------------------------------------------------------------------

    /**
     * Delete statement
     *
     * Generates a platform-specific delete string from the supplied data
     *
     * @access    public
     * @param    string    the table name
     * @param    array    the where clause
     * @param    string    the limit clause
     * @return    string
     */
    function _delete($table, $where = array(), $like = array(), $limit = FALSE)
    {
        $conditions = '';

        if (count($where) &gt; 0 OR count($like) &gt; 0)
        {
            $conditions = "\nWHERE ";
            $conditions .= implode("\n", $this-&gt;ar_where);

            if (count($where) &gt; 0 &amp;&amp; count($like) &gt; 0)
            {
                $conditions .= " AND ";
            }
            $conditions .= implode("\n", $like);
        }

        $limit = ( ! $limit) ? '' : ' LIMIT '.$limit;

        return "DELETE FROM ".$table.$conditions.$limit;
    }

    // --------------------------------------------------------------------

    /**
     * Limit string
     *
     * Generates a platform-specific LIMIT clause
     *
     * @access    public
     * @param    string    the sql query string
     * @param    integer    the number of rows to limit the query to
     * @param    integer    the offset value
     * @return    string
     */
    function _limit($sql, $limit, $offset)
    {
        if (strpos($this-&gt;hostname, 'cubrid') !== FALSE || strpos($this-&gt;hostname, 'sqlite') !== FALSE)
</codefragment>
  </duplication>
  <duplication lines="74" tokens="78">
    <file path="/opt/test/system/database/drivers/cubrid/cubrid_driver.php" line="710"/>
    <file path="/opt/test/system/database/drivers/sqlite/sqlite_driver.php" line="575"/>
    <codefragment>        return "TRUNCATE ".$table;
    }

    // --------------------------------------------------------------------

    /**
     * Delete statement
     *
     * Generates a platform-specific delete string from the supplied data
     *
     * @access    public
     * @param    string    the table name
     * @param    array    the where clause
     * @param    string    the limit clause
     * @return    string
     */
    function _delete($table, $where = array(), $like = array(), $limit = FALSE)
    {
        $conditions = '';

        if (count($where) &gt; 0 OR count($like) &gt; 0)
        {
            $conditions = "\nWHERE ";
            $conditions .= implode("\n", $this-&gt;ar_where);

            if (count($where) &gt; 0 &amp;&amp; count($like) &gt; 0)
            {
                $conditions .= " AND ";
            }
            $conditions .= implode("\n", $like);
        }

        $limit = ( ! $limit) ? '' : ' LIMIT '.$limit;

        return "DELETE FROM ".$table.$conditions.$limit;
    }

    // --------------------------------------------------------------------

    /**
     * Limit string
     *
     * Generates a platform-specific LIMIT clause
     *
     * @access    public
     * @param    string    the sql query string
     * @param    integer    the number of rows to limit the query to
     * @param    integer    the offset value
     * @return    string
     */
    function _limit($sql, $limit, $offset)
    {
        if ($offset == 0)
        {
            $offset = '';
        }
        else
        {
            $offset .= ", ";
        }

        return $sql."LIMIT ".$offset.$limit;
    }

    // --------------------------------------------------------------------

    /**
     * Close DB Connection
     *
     * @access    public
     * @param    resource
     * @return    void
     */
    function _close($conn_id)
</codefragment>
  </duplication>
  <duplication lines="76" tokens="152">
    <file path="/opt/test/system/database/drivers/pdo/pdo_forge.php" line="88"/>
    <file path="/opt/test/system/database/drivers/sqlite/sqlite_forge.php" line="86"/>
    <codefragment>        $current_field_count = 0;

        foreach ($fields as $field=&gt;$attributes)
        {
            // Numeric field names aren't allowed in databases, so if the key is
            // numeric, we know it was assigned by PHP and the developer manually
            // entered the field information, so we'll simply add it to the list
            if (is_numeric($field))
            {
                $sql .= "\n\t$attributes";
            }
            else
            {
                $attributes = array_change_key_case($attributes, CASE_UPPER);

                $sql .= "\n\t".$this-&gt;db-&gt;_protect_identifiers($field);

                $sql .=  ' '.$attributes['TYPE'];

                if (array_key_exists('CONSTRAINT', $attributes))
                {
                    $sql .= '('.$attributes['CONSTRAINT'].')';
                }

                if (array_key_exists('UNSIGNED', $attributes) &amp;&amp; $attributes['UNSIGNED'] === TRUE)
                {
                    $sql .= ' UNSIGNED';
                }

                if (array_key_exists('DEFAULT', $attributes))
                {
                    $sql .= ' DEFAULT \''.$attributes['DEFAULT'].'\'';
                }

                if (array_key_exists('NULL', $attributes) &amp;&amp; $attributes['NULL'] === TRUE)
                {
                    $sql .= ' NULL';
                }
                else
                {
                    $sql .= ' NOT NULL';
                }

                if (array_key_exists('AUTO_INCREMENT', $attributes) &amp;&amp; $attributes['AUTO_INCREMENT'] === TRUE)
                {
                    $sql .= ' AUTO_INCREMENT';
                }
            }

            // don't add a comma on the end of the last field
            if (++$current_field_count &lt; count($fields))
            {
                $sql .= ',';
            }
        }

        if (count($primary_keys) &gt; 0)
        {
            $primary_keys = $this-&gt;db-&gt;_protect_identifiers($primary_keys);
            $sql .= ",\n\tPRIMARY KEY (" . implode(', ', $primary_keys) . ")";
        }

        if (is_array($keys) &amp;&amp; count($keys) &gt; 0)
        {
            foreach ($keys as $key)
            {
                if (is_array($key))
                {
                    $key = $this-&gt;db-&gt;_protect_identifiers($key);
                }
                else
                {
                    $key = array($this-&gt;db-&gt;_protect_identifiers($key));
                }

                $sql .= ",\n\tFOREIGN KEY (" . implode(', ', $key) . ")";
</codefragment>
  </duplication>
  <duplication lines="84" tokens="88">
    <file path="/opt/test/system/database/drivers/pdo/pdo_driver.php" line="408"/>
    <file path="/opt/test/system/database/drivers/odbc/odbc_driver.php" line="327"/>
    <codefragment>    function count_all($table = '')
    {
        if ($table == '')
        {
            return 0;
        }

        $query = $this-&gt;query($this-&gt;_count_string . $this-&gt;_protect_identifiers('numrows') . " FROM " . $this-&gt;_protect_identifiers($table, TRUE, NULL, FALSE));

        if ($query-&gt;num_rows() == 0)
        {
            return 0;
        }

        $row = $query-&gt;row();
        $this-&gt;_reset_select();
        return (int) $row-&gt;numrows;
    }

    // --------------------------------------------------------------------

    /**
     * Show table query
     *
     * Generates a platform-specific query string so that the table names can be fetched
     *
     * @access    private
     * @param    boolean
     * @return    string
     */
    function _list_tables($prefix_limit = FALSE)
    {
        $sql = "SHOW TABLES FROM `".$this-&gt;database."`";

        if ($prefix_limit !== FALSE AND $this-&gt;dbprefix != '')
        {
            //$sql .= " LIKE '".$this-&gt;escape_like_str($this-&gt;dbprefix)."%' ".sprintf($this-&gt;_like_escape_str, $this-&gt;_like_escape_chr);
            return FALSE; // not currently supported
        }

        return $sql;
    }

    // --------------------------------------------------------------------

    /**
     * Show column query
     *
     * Generates a platform-specific query string so that the column names can be fetched
     *
     * @access    public
     * @param    string    the table name
     * @return    string
     */
    function _list_columns($table = '')
    {
        return "SHOW COLUMNS FROM ".$table;
    }

    // --------------------------------------------------------------------

    /**
     * Field data query
     *
     * Generates a platform-specific query so that the column data can be retrieved
     *
     * @access    public
     * @param    string    the table name
     * @return    object
     */
    function _field_data($table)
    {
        return "SELECT TOP 1 FROM ".$table;
    }

    // --------------------------------------------------------------------

    /**
     * The error message string
     *
     * @access    private
     * @return    string
     */
    function _error_message()
</codefragment>
  </duplication>
  <duplication lines="187" tokens="253">
    <file path="/opt/test/system/database/drivers/cubrid/cubrid_driver.php" line="483"/>
    <file path="/opt/test/system/database/drivers/odbc/odbc_driver.php" line="425"/>
    <codefragment>        return cubrid_errno($this-&gt;conn_id);
    }

    // --------------------------------------------------------------------

    /**
     * Escape the SQL Identifiers
     *
     * This function escapes column and table names
     *
     * @access    private
     * @param    string
     * @return    string
     */
    function _escape_identifiers($item)
    {
        if ($this-&gt;_escape_char == '')
        {
            return $item;
        }

        foreach ($this-&gt;_reserved_identifiers as $id)
        {
            if (strpos($item, '.'.$id) !== FALSE)
            {
                $str = $this-&gt;_escape_char. str_replace('.', $this-&gt;_escape_char.'.', $item);

                // remove duplicates if the user already included the escape
                return preg_replace('/['.$this-&gt;_escape_char.']+/', $this-&gt;_escape_char, $str);
            }
        }

        if (strpos($item, '.') !== FALSE)
        {
            $str = $this-&gt;_escape_char.str_replace('.', $this-&gt;_escape_char.'.'.$this-&gt;_escape_char, $item).$this-&gt;_escape_char;
        }
        else
        {
            $str = $this-&gt;_escape_char.$item.$this-&gt;_escape_char;
        }

        // remove duplicates if the user already included the escape
        return preg_replace('/['.$this-&gt;_escape_char.']+/', $this-&gt;_escape_char, $str);
    }

    // --------------------------------------------------------------------

    /**
     * From Tables
     *
     * This function implicitly groups FROM tables so there is no confusion
     * about operator precedence in harmony with SQL standards
     *
     * @access    public
     * @param    type
     * @return    type
     */
    function _from_tables($tables)
    {
        if ( ! is_array($tables))
        {
            $tables = array($tables);
        }

        return '('.implode(', ', $tables).')';
    }

    // --------------------------------------------------------------------

    /**
     * Insert statement
     *
     * Generates a platform-specific insert string from the supplied data
     *
     * @access    public
     * @param    string    the table name
     * @param    array    the insert keys
     * @param    array    the insert values
     * @return    string
     */
    function _insert($table, $keys, $values)
    {
        return "INSERT INTO ".$table." (\"".implode('", "', $keys)."\") VALUES (".implode(', ', $values).")";
    }

    // --------------------------------------------------------------------


    /**
     * Replace statement
     *
     * Generates a platform-specific replace string from the supplied data
     *
     * @access    public
     * @param    string    the table name
     * @param    array    the insert keys
     * @param    array    the insert values
     * @return    string
     */
    function _replace($table, $keys, $values)
    {
        return "REPLACE INTO ".$table." (\"".implode('", "', $keys)."\") VALUES (".implode(', ', $values).")";
    }

    // --------------------------------------------------------------------

    /**
     * Insert_batch statement
     *
     * Generates a platform-specific insert string from the supplied data
     *
     * @access    public
     * @param    string    the table name
     * @param    array    the insert keys
     * @param    array    the insert values
     * @return    string
     */
    function _insert_batch($table, $keys, $values)
    {
        return "INSERT INTO ".$table." (\"".implode('", "', $keys)."\") VALUES ".implode(', ', $values);
    }

    // --------------------------------------------------------------------


    /**
     * Update statement
     *
     * Generates a platform-specific update string from the supplied data
     *
     * @access    public
     * @param    string    the table name
     * @param    array    the update data
     * @param    array    the where clause
     * @param    array    the orderby clause
     * @param    array    the limit clause
     * @return    string
     */
    function _update($table, $values, $where, $orderby = array(), $limit = FALSE)
    {
        foreach ($values as $key =&gt; $val)
        {
            $valstr[] = sprintf('"%s" = %s', $key, $val);
        }

        $limit = ( ! $limit) ? '' : ' LIMIT '.$limit;

        $orderby = (count($orderby) &gt;= 1)?' ORDER BY '.implode(", ", $orderby):'';

        $sql = "UPDATE ".$table." SET ".implode(', ', $valstr);

        $sql .= ($where != '' AND count($where) &gt;=1) ? " WHERE ".implode(" ", $where) : '';

        $sql .= $orderby.$limit;

        return $sql;
    }

    // --------------------------------------------------------------------


    /**
     * Update_Batch statement
     *
     * Generates a platform-specific batch update string from the supplied data
     *
     * @access    public
     * @param    string    the table name
     * @param    array    the update data
     * @param    array    the where clause
     * @return    string
     */
    function _update_batch($table, $values, $index, $where = NULL)
    {
        $ids = array();
        $where = ($where != '' AND count($where) &gt;=1) ? implode(" ", $where).' AND ' : '';

        foreach ($values as $key =&gt; $val)
        {
            $ids[] = $val[$index];

            foreach (array_keys($val) as $field)
            {
                if ($field != $index)
                {
                    $final[$field][] = 'WHEN '.$index.' = '.$val[$index].' THEN '.$val[$field];
                }
</codefragment>
  </duplication>
  <duplication lines="235" tokens="338">
    <file path="/opt/test/system/database/drivers/pdo/pdo_forge.php" line="25"/>
    <file path="/opt/test/system/database/drivers/odbc/odbc_forge.php" line="25"/>
    <codefragment>class CI_DB_pdo_forge extends CI_DB_forge {

    /**
     * Create database
     *
     * @access    private
     * @param    string    the database name
     * @return    bool
     */
    function _create_database()
    {
        // PDO has no "create database" command since it's
        // designed to connect to an existing database
        if ($this-&gt;db-&gt;db_debug)
        {
            return $this-&gt;db-&gt;display_error('db_unsuported_feature');
        }
        return FALSE;
    }

    // --------------------------------------------------------------------

    /**
     * Drop database
     *
     * @access    private
     * @param    string    the database name
     * @return    bool
     */
    function _drop_database($name)
    {
        // PDO has no "drop database" command since it's
        // designed to connect to an existing database
        if ($this-&gt;db-&gt;db_debug)
        {
            return $this-&gt;db-&gt;display_error('db_unsuported_feature');
        }
        return FALSE;
    }

    // --------------------------------------------------------------------

    /**
     * Create Table
     *
     * @access    private
     * @param    string    the table name
     * @param    array    the fields
     * @param    mixed    primary key(s)
     * @param    mixed    key(s)
     * @param    boolean    should 'IF NOT EXISTS' be added to the SQL
     * @return    bool
     */
    function _create_table($table, $fields, $primary_keys, $keys, $if_not_exists)
    {
        $sql = 'CREATE TABLE ';

        if ($if_not_exists === TRUE)
        {
            $sql .= 'IF NOT EXISTS ';
        }

        $sql .= $this-&gt;db-&gt;_escape_identifiers($table)." (";
        $current_field_count = 0;

        foreach ($fields as $field=&gt;$attributes)
        {
            // Numeric field names aren't allowed in databases, so if the key is
            // numeric, we know it was assigned by PHP and the developer manually
            // entered the field information, so we'll simply add it to the list
            if (is_numeric($field))
            {
                $sql .= "\n\t$attributes";
            }
            else
            {
                $attributes = array_change_key_case($attributes, CASE_UPPER);

                $sql .= "\n\t".$this-&gt;db-&gt;_protect_identifiers($field);

                $sql .=  ' '.$attributes['TYPE'];

                if (array_key_exists('CONSTRAINT', $attributes))
                {
                    $sql .= '('.$attributes['CONSTRAINT'].')';
                }

                if (array_key_exists('UNSIGNED', $attributes) &amp;&amp; $attributes['UNSIGNED'] === TRUE)
                {
                    $sql .= ' UNSIGNED';
                }

                if (array_key_exists('DEFAULT', $attributes))
                {
                    $sql .= ' DEFAULT \''.$attributes['DEFAULT'].'\'';
                }

                if (array_key_exists('NULL', $attributes) &amp;&amp; $attributes['NULL'] === TRUE)
                {
                    $sql .= ' NULL';
                }
                else
                {
                    $sql .= ' NOT NULL';
                }

                if (array_key_exists('AUTO_INCREMENT', $attributes) &amp;&amp; $attributes['AUTO_INCREMENT'] === TRUE)
                {
                    $sql .= ' AUTO_INCREMENT';
                }
            }

            // don't add a comma on the end of the last field
            if (++$current_field_count &lt; count($fields))
            {
                $sql .= ',';
            }
        }

        if (count($primary_keys) &gt; 0)
        {
            $primary_keys = $this-&gt;db-&gt;_protect_identifiers($primary_keys);
            $sql .= ",\n\tPRIMARY KEY (" . implode(', ', $primary_keys) . ")";
        }

        if (is_array($keys) &amp;&amp; count($keys) &gt; 0)
        {
            foreach ($keys as $key)
            {
                if (is_array($key))
                {
                    $key = $this-&gt;db-&gt;_protect_identifiers($key);
                }
                else
                {
                    $key = array($this-&gt;db-&gt;_protect_identifiers($key));
                }

                $sql .= ",\n\tFOREIGN KEY (" . implode(', ', $key) . ")";
            }
        }

        $sql .= "\n)";

        return $sql;
    }

    // --------------------------------------------------------------------

    /**
     * Drop Table
     *
     * @access    private
     * @return    bool
     */
    function _drop_table($table)
    {
        // Not a supported PDO feature
        if ($this-&gt;db-&gt;db_debug)
        {
            return $this-&gt;db-&gt;display_error('db_unsuported_feature');
        }
        return FALSE;
    }

    // --------------------------------------------------------------------

    /**
     * Alter table query
     *
     * Generates a platform-specific query so that a table can be altered
     * Called by add_column(), drop_column(), and column_alter(),
     *
     * @access    private
     * @param    string    the ALTER type (ADD, DROP, CHANGE)
     * @param    string    the column name
     * @param    string    the table name
     * @param    string    the column definition
     * @param    string    the default value
     * @param    boolean    should 'NOT NULL' be added
     * @param    string    the field after which we should add the new field
     * @return    object
     */
    function _alter_table($alter_type, $table, $column_name, $column_definition = '', $default_value = '', $null = '', $after_field = '')
    {
        $sql = 'ALTER TABLE '.$this-&gt;db-&gt;_protect_identifiers($table)." $alter_type ".$this-&gt;db-&gt;_protect_identifiers($column_name);

        // DROP has everything it needs now.
        if ($alter_type == 'DROP')
        {
            return $sql;
        }

        $sql .= " $column_definition";

        if ($default_value != '')
        {
            $sql .= " DEFAULT \"$default_value\"";
        }

        if ($null === NULL)
        {
            $sql .= ' NULL';
        }
        else
        {
            $sql .= ' NOT NULL';
        }

        if ($after_field != '')
        {
            $sql .= ' AFTER ' . $this-&gt;db-&gt;_protect_identifiers($after_field);
        }

        return $sql;

    }


    // --------------------------------------------------------------------

    /**
     * Rename a table
     *
     * Generates a platform-specific query so that a table can be renamed
     *
     * @access    private
     * @param    string    the old table name
     * @param    string    the new table name
     * @return    string
     */
    function _rename_table($table_name, $new_table_name)
    {
        $sql = 'ALTER TABLE '.$this-&gt;db-&gt;_protect_identifiers($table_name)." RENAME TO ".$this-&gt;db-&gt;_protect_identifiers($new_table_name);
        return $sql;
</codefragment>
  </duplication>
  <duplication lines="113" tokens="188">
    <file path="/opt/test/system/database/drivers/pdo/pdo_forge.php" line="78"/>
    <file path="/opt/test/system/database/drivers/mssql/mssql_forge.php" line="79"/>
    <codefragment>    function _create_table($table, $fields, $primary_keys, $keys, $if_not_exists)
    {
        $sql = 'CREATE TABLE ';

        if ($if_not_exists === TRUE)
        {
            $sql .= 'IF NOT EXISTS ';
        }

        $sql .= $this-&gt;db-&gt;_escape_identifiers($table)." (";
        $current_field_count = 0;

        foreach ($fields as $field=&gt;$attributes)
        {
            // Numeric field names aren't allowed in databases, so if the key is
            // numeric, we know it was assigned by PHP and the developer manually
            // entered the field information, so we'll simply add it to the list
            if (is_numeric($field))
            {
                $sql .= "\n\t$attributes";
            }
            else
            {
                $attributes = array_change_key_case($attributes, CASE_UPPER);

                $sql .= "\n\t".$this-&gt;db-&gt;_protect_identifiers($field);

                $sql .=  ' '.$attributes['TYPE'];

                if (array_key_exists('CONSTRAINT', $attributes))
                {
                    $sql .= '('.$attributes['CONSTRAINT'].')';
                }

                if (array_key_exists('UNSIGNED', $attributes) &amp;&amp; $attributes['UNSIGNED'] === TRUE)
                {
                    $sql .= ' UNSIGNED';
                }

                if (array_key_exists('DEFAULT', $attributes))
                {
                    $sql .= ' DEFAULT \''.$attributes['DEFAULT'].'\'';
                }

                if (array_key_exists('NULL', $attributes) &amp;&amp; $attributes['NULL'] === TRUE)
                {
                    $sql .= ' NULL';
                }
                else
                {
                    $sql .= ' NOT NULL';
                }

                if (array_key_exists('AUTO_INCREMENT', $attributes) &amp;&amp; $attributes['AUTO_INCREMENT'] === TRUE)
                {
                    $sql .= ' AUTO_INCREMENT';
                }
            }

            // don't add a comma on the end of the last field
            if (++$current_field_count &lt; count($fields))
            {
                $sql .= ',';
            }
        }

        if (count($primary_keys) &gt; 0)
        {
            $primary_keys = $this-&gt;db-&gt;_protect_identifiers($primary_keys);
            $sql .= ",\n\tPRIMARY KEY (" . implode(', ', $primary_keys) . ")";
        }

        if (is_array($keys) &amp;&amp; count($keys) &gt; 0)
        {
            foreach ($keys as $key)
            {
                if (is_array($key))
                {
                    $key = $this-&gt;db-&gt;_protect_identifiers($key);
                }
                else
                {
                    $key = array($this-&gt;db-&gt;_protect_identifiers($key));
                }

                $sql .= ",\n\tFOREIGN KEY (" . implode(', ', $key) . ")";
            }
        }

        $sql .= "\n)";

        return $sql;
    }

    // --------------------------------------------------------------------

    /**
     * Drop Table
     *
     * @access    private
     * @return    bool
     */
    function _drop_table($table)
    {
        // Not a supported PDO feature
        if ($this-&gt;db-&gt;db_debug)
        {
            return $this-&gt;db-&gt;display_error('db_unsuported_feature');
        }
        return FALSE;
    }

    // --------------------------------------------------------------------
</codefragment>
  </duplication>
  <duplication lines="52" tokens="96">
    <file path="/opt/test/system/database/drivers/pdo/pdo_forge.php" line="208"/>
    <file path="/opt/test/system/database/drivers/mssql/mssql_forge.php" line="191"/>
    <codefragment>    function _alter_table($alter_type, $table, $column_name, $column_definition = '', $default_value = '', $null = '', $after_field = '')
    {
        $sql = 'ALTER TABLE '.$this-&gt;db-&gt;_protect_identifiers($table)." $alter_type ".$this-&gt;db-&gt;_protect_identifiers($column_name);

        // DROP has everything it needs now.
        if ($alter_type == 'DROP')
        {
            return $sql;
        }

        $sql .= " $column_definition";

        if ($default_value != '')
        {
            $sql .= " DEFAULT \"$default_value\"";
        }

        if ($null === NULL)
        {
            $sql .= ' NULL';
        }
        else
        {
            $sql .= ' NOT NULL';
        }

        if ($after_field != '')
        {
            $sql .= ' AFTER ' . $this-&gt;db-&gt;_protect_identifiers($after_field);
        }

        return $sql;

    }


    // --------------------------------------------------------------------

    /**
     * Rename a table
     *
     * Generates a platform-specific query so that a table can be renamed
     *
     * @access    private
     * @param    string    the old table name
     * @param    string    the new table name
     * @return    string
     */
    function _rename_table($table_name, $new_table_name)
    {
        $sql = 'ALTER TABLE '.$this-&gt;db-&gt;_protect_identifiers($table_name)." RENAME TO ".$this-&gt;db-&gt;_protect_identifiers($new_table_name);
        return $sql;
</codefragment>
  </duplication>
  <duplication lines="51" tokens="99">
    <file path="/opt/test/system/database/drivers/cubrid/cubrid_driver.php" line="497"/>
    <file path="/opt/test/system/database/drivers/mssql/mssql_driver.php" line="469"/>
    <codefragment>    function _escape_identifiers($item)
    {
        if ($this-&gt;_escape_char == '')
        {
            return $item;
        }

        foreach ($this-&gt;_reserved_identifiers as $id)
        {
            if (strpos($item, '.'.$id) !== FALSE)
            {
                $str = $this-&gt;_escape_char. str_replace('.', $this-&gt;_escape_char.'.', $item);

                // remove duplicates if the user already included the escape
                return preg_replace('/['.$this-&gt;_escape_char.']+/', $this-&gt;_escape_char, $str);
            }
        }

        if (strpos($item, '.') !== FALSE)
        {
            $str = $this-&gt;_escape_char.str_replace('.', $this-&gt;_escape_char.'.'.$this-&gt;_escape_char, $item).$this-&gt;_escape_char;
        }
        else
        {
            $str = $this-&gt;_escape_char.$item.$this-&gt;_escape_char;
        }

        // remove duplicates if the user already included the escape
        return preg_replace('/['.$this-&gt;_escape_char.']+/', $this-&gt;_escape_char, $str);
    }

    // --------------------------------------------------------------------

    /**
     * From Tables
     *
     * This function implicitly groups FROM tables so there is no confusion
     * about operator precedence in harmony with SQL standards
     *
     * @access    public
     * @param    type
     * @return    type
     */
    function _from_tables($tables)
    {
        if ( ! is_array($tables))
        {
            $tables = array($tables);
        }

        return '('.implode(', ', $tables).')';
</codefragment>
  </duplication>
  <duplication lines="57" tokens="83">
    <file path="/opt/test/system/database/drivers/sqlite/sqlite_driver.php" line="519"/>
    <file path="/opt/test/system/database/drivers/mssql/mssql_driver.php" line="535"/>
    <codefragment>    function _insert($table, $keys, $values)
    {
        return "INSERT INTO ".$table." (".implode(', ', $keys).") VALUES (".implode(', ', $values).")";
    }

    // --------------------------------------------------------------------

    /**
     * Update statement
     *
     * Generates a platform-specific update string from the supplied data
     *
     * @access    public
     * @param    string    the table name
     * @param    array    the update data
     * @param    array    the where clause
     * @param    array    the orderby clause
     * @param    array    the limit clause
     * @return    string
     */
    function _update($table, $values, $where, $orderby = array(), $limit = FALSE)
    {
        foreach ($values as $key =&gt; $val)
        {
            $valstr[] = $key." = ".$val;
        }

        $limit = ( ! $limit) ? '' : ' LIMIT '.$limit;

        $orderby = (count($orderby) &gt;= 1)?' ORDER BY '.implode(", ", $orderby):'';

        $sql = "UPDATE ".$table." SET ".implode(', ', $valstr);

        $sql .= ($where != '' AND count($where) &gt;=1) ? " WHERE ".implode(" ", $where) : '';

        $sql .= $orderby.$limit;

        return $sql;
    }


    // --------------------------------------------------------------------

    /**
     * Truncate statement
     *
     * Generates a platform-specific truncate string from the supplied data
     * If the database does not support the truncate() command
     * This function maps to "DELETE FROM table"
     *
     * @access    public
     * @param    string    the table name
     * @return    string
     */
    function _truncate($table)
    {
        return $this-&gt;_delete($table);
</codefragment>
  </duplication>
  <duplication lines="29" tokens="89">
    <file path="/opt/test/system/database/drivers/cubrid/cubrid_driver.php" line="497"/>
    <file path="/opt/test/system/database/drivers/oci8/oci8_driver.php" line="573"/>
    <codefragment>    function _escape_identifiers($item)
    {
        if ($this-&gt;_escape_char == '')
        {
            return $item;
        }

        foreach ($this-&gt;_reserved_identifiers as $id)
        {
            if (strpos($item, '.'.$id) !== FALSE)
            {
                $str = $this-&gt;_escape_char. str_replace('.', $this-&gt;_escape_char.'.', $item);

                // remove duplicates if the user already included the escape
                return preg_replace('/['.$this-&gt;_escape_char.']+/', $this-&gt;_escape_char, $str);
            }
        }

        if (strpos($item, '.') !== FALSE)
        {
            $str = $this-&gt;_escape_char.str_replace('.', $this-&gt;_escape_char.'.'.$this-&gt;_escape_char, $item).$this-&gt;_escape_char;
        }
        else
        {
            $str = $this-&gt;_escape_char.$item.$this-&gt;_escape_char;
        }

        // remove duplicates if the user already included the escape
        return preg_replace('/['.$this-&gt;_escape_char.']+/', $this-&gt;_escape_char, $str);
</codefragment>
  </duplication>
  <duplication lines="102" tokens="179">
    <file path="/opt/test/system/database/drivers/pdo/pdo_forge.php" line="62"/>
    <file path="/opt/test/system/database/drivers/oci8/oci8_forge.php" line="50"/>
    <codefragment>        return FALSE;
    }

    // --------------------------------------------------------------------

    /**
     * Create Table
     *
     * @access    private
     * @param    string    the table name
     * @param    array    the fields
     * @param    mixed    primary key(s)
     * @param    mixed    key(s)
     * @param    boolean    should 'IF NOT EXISTS' be added to the SQL
     * @return    bool
     */
    function _create_table($table, $fields, $primary_keys, $keys, $if_not_exists)
    {
        $sql = 'CREATE TABLE ';

        if ($if_not_exists === TRUE)
        {
            $sql .= 'IF NOT EXISTS ';
        }

        $sql .= $this-&gt;db-&gt;_escape_identifiers($table)." (";
        $current_field_count = 0;

        foreach ($fields as $field=&gt;$attributes)
        {
            // Numeric field names aren't allowed in databases, so if the key is
            // numeric, we know it was assigned by PHP and the developer manually
            // entered the field information, so we'll simply add it to the list
            if (is_numeric($field))
            {
                $sql .= "\n\t$attributes";
            }
            else
            {
                $attributes = array_change_key_case($attributes, CASE_UPPER);

                $sql .= "\n\t".$this-&gt;db-&gt;_protect_identifiers($field);

                $sql .=  ' '.$attributes['TYPE'];

                if (array_key_exists('CONSTRAINT', $attributes))
                {
                    $sql .= '('.$attributes['CONSTRAINT'].')';
                }

                if (array_key_exists('UNSIGNED', $attributes) &amp;&amp; $attributes['UNSIGNED'] === TRUE)
                {
                    $sql .= ' UNSIGNED';
                }

                if (array_key_exists('DEFAULT', $attributes))
                {
                    $sql .= ' DEFAULT \''.$attributes['DEFAULT'].'\'';
                }

                if (array_key_exists('NULL', $attributes) &amp;&amp; $attributes['NULL'] === TRUE)
                {
                    $sql .= ' NULL';
                }
                else
                {
                    $sql .= ' NOT NULL';
                }

                if (array_key_exists('AUTO_INCREMENT', $attributes) &amp;&amp; $attributes['AUTO_INCREMENT'] === TRUE)
                {
                    $sql .= ' AUTO_INCREMENT';
                }
            }

            // don't add a comma on the end of the last field
            if (++$current_field_count &lt; count($fields))
            {
                $sql .= ',';
            }
        }

        if (count($primary_keys) &gt; 0)
        {
            $primary_keys = $this-&gt;db-&gt;_protect_identifiers($primary_keys);
            $sql .= ",\n\tPRIMARY KEY (" . implode(', ', $primary_keys) . ")";
        }

        if (is_array($keys) &amp;&amp; count($keys) &gt; 0)
        {
            foreach ($keys as $key)
            {
                if (is_array($key))
                {
                    $key = $this-&gt;db-&gt;_protect_identifiers($key);
                }
                else
                {
                    $key = array($this-&gt;db-&gt;_protect_identifiers($key));
                }

                $sql .= ",\n\tFOREIGN KEY (" . implode(', ', $key) . ")";
</codefragment>
  </duplication>
  <duplication lines="72" tokens="98">
    <file path="/opt/test/system/database/drivers/pdo/pdo_forge.php" line="187"/>
    <file path="/opt/test/system/database/drivers/oci8/oci8_forge.php" line="170"/>
    <codefragment>        return FALSE;
    }

    // --------------------------------------------------------------------

    /**
     * Alter table query
     *
     * Generates a platform-specific query so that a table can be altered
     * Called by add_column(), drop_column(), and column_alter(),
     *
     * @access    private
     * @param    string    the ALTER type (ADD, DROP, CHANGE)
     * @param    string    the column name
     * @param    string    the table name
     * @param    string    the column definition
     * @param    string    the default value
     * @param    boolean    should 'NOT NULL' be added
     * @param    string    the field after which we should add the new field
     * @return    object
     */
    function _alter_table($alter_type, $table, $column_name, $column_definition = '', $default_value = '', $null = '', $after_field = '')
    {
        $sql = 'ALTER TABLE '.$this-&gt;db-&gt;_protect_identifiers($table)." $alter_type ".$this-&gt;db-&gt;_protect_identifiers($column_name);

        // DROP has everything it needs now.
        if ($alter_type == 'DROP')
        {
            return $sql;
        }

        $sql .= " $column_definition";

        if ($default_value != '')
        {
            $sql .= " DEFAULT \"$default_value\"";
        }

        if ($null === NULL)
        {
            $sql .= ' NULL';
        }
        else
        {
            $sql .= ' NOT NULL';
        }

        if ($after_field != '')
        {
            $sql .= ' AFTER ' . $this-&gt;db-&gt;_protect_identifiers($after_field);
        }

        return $sql;

    }


    // --------------------------------------------------------------------

    /**
     * Rename a table
     *
     * Generates a platform-specific query so that a table can be renamed
     *
     * @access    private
     * @param    string    the old table name
     * @param    string    the new table name
     * @return    string
     */
    function _rename_table($table_name, $new_table_name)
    {
        $sql = 'ALTER TABLE '.$this-&gt;db-&gt;_protect_identifiers($table_name)." RENAME TO ".$this-&gt;db-&gt;_protect_identifiers($new_table_name);
</codefragment>
  </duplication>
  <duplication lines="67" tokens="76">
    <file path="/opt/test/system/database/drivers/mysqli/mysqli_forge.php" line="25"/>
    <file path="/opt/test/system/database/drivers/mysql/mysql_forge.php" line="25"/>
    <codefragment>class CI_DB_mysqli_forge extends CI_DB_forge {

    /**
     * Create database
     *
     * @access    private
     * @param    string    the database name
     * @return    bool
     */
    function _create_database($name)
    {
        return "CREATE DATABASE ".$name;
    }

    // --------------------------------------------------------------------

    /**
     * Drop database
     *
     * @access    private
     * @param    string    the database name
     * @return    bool
     */
    function _drop_database($name)
    {
        return "DROP DATABASE ".$name;
    }

    // --------------------------------------------------------------------

    /**
     * Process Fields
     *
     * @access    private
     * @param    mixed    the fields
     * @return    string
     */
    function _process_fields($fields)
    {
        $current_field_count = 0;
        $sql = '';

        foreach ($fields as $field=&gt;$attributes)
        {
            // Numeric field names aren't allowed in databases, so if the key is
            // numeric, we know it was assigned by PHP and the developer manually
            // entered the field information, so we'll simply add it to the list
            if (is_numeric($field))
            {
                $sql .= "\n\t$attributes";
            }
            else
            {
                $attributes = array_change_key_case($attributes, CASE_UPPER);

                $sql .= "\n\t".$this-&gt;db-&gt;_protect_identifiers($field);

                if (array_key_exists('NAME', $attributes))
                {
                    $sql .= ' '.$this-&gt;db-&gt;_protect_identifiers($attributes['NAME']).' ';
                }

                if (array_key_exists('TYPE', $attributes))
                {
                    $sql .=  ' '.$attributes['TYPE'];
                }

</codefragment>
  </duplication>
  <duplication lines="161" tokens="279">
    <file path="/opt/test/system/database/drivers/mysqli/mysqli_forge.php" line="94"/>
    <file path="/opt/test/system/database/drivers/mysql/mysql_forge.php" line="107"/>
    <codefragment>                    $sql .= '('.$attributes['CONSTRAINT'].')';
                }

                if (array_key_exists('UNSIGNED', $attributes) &amp;&amp; $attributes['UNSIGNED'] === TRUE)
                {
                    $sql .= ' UNSIGNED';
                }

                if (array_key_exists('DEFAULT', $attributes))
                {
                    $sql .= ' DEFAULT \''.$attributes['DEFAULT'].'\'';
                }

                if (array_key_exists('NULL', $attributes) &amp;&amp; $attributes['NULL'] === TRUE)
                {
                    $sql .= ' NULL';
                }
                else
                {
                    $sql .= ' NOT NULL';
                }

                if (array_key_exists('AUTO_INCREMENT', $attributes) &amp;&amp; $attributes['AUTO_INCREMENT'] === TRUE)
                {
                    $sql .= ' AUTO_INCREMENT';
                }
            }

            // don't add a comma on the end of the last field
            if (++$current_field_count &lt; count($fields))
            {
                $sql .= ',';
            }
        }

        return $sql;
    }

    // --------------------------------------------------------------------

    /**
     * Create Table
     *
     * @access    private
     * @param    string    the table name
     * @param    mixed    the fields
     * @param    mixed    primary key(s)
     * @param    mixed    key(s)
     * @param    boolean    should 'IF NOT EXISTS' be added to the SQL
     * @return    bool
     */
    function _create_table($table, $fields, $primary_keys, $keys, $if_not_exists)
    {
        $sql = 'CREATE TABLE ';

        if ($if_not_exists === TRUE)
        {
            $sql .= 'IF NOT EXISTS ';
        }

        $sql .= $this-&gt;db-&gt;_escape_identifiers($table)." (";

        $sql .= $this-&gt;_process_fields($fields);

        if (count($primary_keys) &gt; 0)
        {
            $key_name = $this-&gt;db-&gt;_protect_identifiers(implode('_', $primary_keys));
            $primary_keys = $this-&gt;db-&gt;_protect_identifiers($primary_keys);
            $sql .= ",\n\tPRIMARY KEY ".$key_name." (" . implode(', ', $primary_keys) . ")";
        }

        if (is_array($keys) &amp;&amp; count($keys) &gt; 0)
        {
            foreach ($keys as $key)
            {
                if (is_array($key))
                {
                    $key_name = $this-&gt;db-&gt;_protect_identifiers(implode('_', $key));
                    $key = $this-&gt;db-&gt;_protect_identifiers($key);
                }
                else
                {
                    $key_name = $this-&gt;db-&gt;_protect_identifiers($key);
                    $key = array($key_name);
                }

                $sql .= ",\n\tKEY {$key_name} (" . implode(', ', $key) . ")";
            }
        }

        $sql .= "\n) DEFAULT CHARACTER SET {$this-&gt;db-&gt;char_set} COLLATE {$this-&gt;db-&gt;dbcollat};";

        return $sql;
    }

    // --------------------------------------------------------------------

    /**
     * Drop Table
     *
     * @access    private
     * @return    string
     */
    function _drop_table($table)
    {
        return "DROP TABLE IF EXISTS ".$this-&gt;db-&gt;_escape_identifiers($table);
    }

    // --------------------------------------------------------------------

    /**
     * Alter table query
     *
     * Generates a platform-specific query so that a table can be altered
     * Called by add_column(), drop_column(), and column_alter(),
     *
     * @access    private
     * @param    string    the ALTER type (ADD, DROP, CHANGE)
     * @param    string    the column name
     * @param    array    fields
     * @param    string    the field after which we should add the new field
     * @return    object
     */
    function _alter_table($alter_type, $table, $fields, $after_field = '')
    {
        $sql = 'ALTER TABLE '.$this-&gt;db-&gt;_protect_identifiers($table)." $alter_type ";

        // DROP has everything it needs now.
        if ($alter_type == 'DROP')
        {
            return $sql.$this-&gt;db-&gt;_protect_identifiers($fields);
        }

        $sql .= $this-&gt;_process_fields($fields);

        if ($after_field != '')
        {
            $sql .= ' AFTER ' . $this-&gt;db-&gt;_protect_identifiers($after_field);
        }

        return $sql;
    }

    // --------------------------------------------------------------------

    /**
     * Rename a table
     *
     * Generates a platform-specific query so that a table can be renamed
     *
     * @access    private
     * @param    string    the old table name
     * @param    string    the new table name
     * @return    string
     */
    function _rename_table($table_name, $new_table_name)
    {
        $sql = 'ALTER TABLE '.$this-&gt;db-&gt;_protect_identifiers($table_name)." RENAME TO ".$this-&gt;db-&gt;_protect_identifiers($new_table_name);
        return $sql;
    }

</codefragment>
  </duplication>
  <duplication lines="121" tokens="130">
    <file path="/opt/test/system/database/drivers/mysqli/mysqli_driver.php" line="194"/>
    <file path="/opt/test/system/database/drivers/mysql/mysql_driver.php" line="193"/>
    <codefragment>    function _prep_query($sql)
    {
        // "DELETE FROM TABLE" returns 0 affected rows This hack modifies
        // the query so that it returns the number of affected rows
        if ($this-&gt;delete_hack === TRUE)
        {
            if (preg_match('/^\s*DELETE\s+FROM\s+(\S+)\s*$/i', $sql))
            {
                $sql = preg_replace("/^\s*DELETE\s+FROM\s+(\S+)\s*$/", "DELETE FROM \\1 WHERE 1=1", $sql);
            }
        }

        return $sql;
    }

    // --------------------------------------------------------------------

    /**
     * Begin Transaction
     *
     * @access    public
     * @return    bool
     */
    function trans_begin($test_mode = FALSE)
    {
        if ( ! $this-&gt;trans_enabled)
        {
            return TRUE;
        }

        // When transactions are nested we only begin/commit/rollback the outermost ones
        if ($this-&gt;_trans_depth &gt; 0)
        {
            return TRUE;
        }

        // Reset the transaction failure flag.
        // If the $test_mode flag is set to TRUE transactions will be rolled back
        // even if the queries produce a successful result.
        $this-&gt;_trans_failure = ($test_mode === TRUE) ? TRUE : FALSE;

        $this-&gt;simple_query('SET AUTOCOMMIT=0');
        $this-&gt;simple_query('START TRANSACTION'); // can also be BEGIN or BEGIN WORK
        return TRUE;
    }

    // --------------------------------------------------------------------

    /**
     * Commit Transaction
     *
     * @access    public
     * @return    bool
     */
    function trans_commit()
    {
        if ( ! $this-&gt;trans_enabled)
        {
            return TRUE;
        }

        // When transactions are nested we only begin/commit/rollback the outermost ones
        if ($this-&gt;_trans_depth &gt; 0)
        {
            return TRUE;
        }

        $this-&gt;simple_query('COMMIT');
        $this-&gt;simple_query('SET AUTOCOMMIT=1');
        return TRUE;
    }

    // --------------------------------------------------------------------

    /**
     * Rollback Transaction
     *
     * @access    public
     * @return    bool
     */
    function trans_rollback()
    {
        if ( ! $this-&gt;trans_enabled)
        {
            return TRUE;
        }

        // When transactions are nested we only begin/commit/rollback the outermost ones
        if ($this-&gt;_trans_depth &gt; 0)
        {
            return TRUE;
        }

        $this-&gt;simple_query('ROLLBACK');
        $this-&gt;simple_query('SET AUTOCOMMIT=1');
        return TRUE;
    }

    // --------------------------------------------------------------------

    /**
     * Escape String
     *
     * @access    public
     * @param    string
     * @param    bool    whether or not the string will be used in a LIKE condition
     * @return    string
     */
    function escape_str($str, $like = FALSE)
    {
        if (is_array($str))
        {
            foreach ($str as $key =&gt; $val)
            {
                $str[$key] = $this-&gt;escape_str($val, $like);
            }

            return $str;
        }

        if (function_exists('mysqli_real_escape_string') AND is_object($this-&gt;conn_id))
</codefragment>
  </duplication>
  <duplication lines="100" tokens="111">
    <file path="/opt/test/system/database/drivers/mysqli/mysqli_driver.php" line="359"/>
    <file path="/opt/test/system/database/drivers/mysql/mysql_driver.php" line="358"/>
    <codefragment>        return @mysqli_insert_id($this-&gt;conn_id);
    }

    // --------------------------------------------------------------------

    /**
     * "Count All" query
     *
     * Generates a platform-specific query string that counts all records in
     * the specified database
     *
     * @access    public
     * @param    string
     * @return    string
     */
    function count_all($table = '')
    {
        if ($table == '')
        {
            return 0;
        }

        $query = $this-&gt;query($this-&gt;_count_string . $this-&gt;_protect_identifiers('numrows') . " FROM " . $this-&gt;_protect_identifiers($table, TRUE, NULL, FALSE));

        if ($query-&gt;num_rows() == 0)
        {
            return 0;
        }

        $row = $query-&gt;row();
        $this-&gt;_reset_select();
        return (int) $row-&gt;numrows;
    }

    // --------------------------------------------------------------------

    /**
     * List table query
     *
     * Generates a platform-specific query string so that the table names can be fetched
     *
     * @access    private
     * @param    boolean
     * @return    string
     */
    function _list_tables($prefix_limit = FALSE)
    {
        $sql = "SHOW TABLES FROM ".$this-&gt;_escape_char.$this-&gt;database.$this-&gt;_escape_char;

        if ($prefix_limit !== FALSE AND $this-&gt;dbprefix != '')
        {
            $sql .= " LIKE '".$this-&gt;escape_like_str($this-&gt;dbprefix)."%'";
        }

        return $sql;
    }

    // --------------------------------------------------------------------

    /**
     * Show column query
     *
     * Generates a platform-specific query string so that the column names can be fetched
     *
     * @access    public
     * @param    string    the table name
     * @return    string
     */
    function _list_columns($table = '')
    {
        return "SHOW COLUMNS FROM ".$this-&gt;_protect_identifiers($table, TRUE, NULL, FALSE);
    }

    // --------------------------------------------------------------------

    /**
     * Field data query
     *
     * Generates a platform-specific query so that the column data can be retrieved
     *
     * @access    public
     * @param    string    the table name
     * @return    object
     */
    function _field_data($table)
    {
        return "DESCRIBE ".$table;
    }

    // --------------------------------------------------------------------

    /**
     * The error message string
     *
     * @access    private
     * @return    string
     */
    function _error_message()
    {
        return mysqli_error($this-&gt;conn_id);
</codefragment>
  </duplication>
  <duplication lines="100" tokens="125">
    <file path="/opt/test/system/database/drivers/cubrid/cubrid_driver.php" line="483"/>
    <file path="/opt/test/system/database/drivers/mysql/mysql_driver.php" line="470"/>
    <codefragment>        return cubrid_errno($this-&gt;conn_id);
    }

    // --------------------------------------------------------------------

    /**
     * Escape the SQL Identifiers
     *
     * This function escapes column and table names
     *
     * @access    private
     * @param    string
     * @return    string
     */
    function _escape_identifiers($item)
    {
        if ($this-&gt;_escape_char == '')
        {
            return $item;
        }

        foreach ($this-&gt;_reserved_identifiers as $id)
        {
            if (strpos($item, '.'.$id) !== FALSE)
            {
                $str = $this-&gt;_escape_char. str_replace('.', $this-&gt;_escape_char.'.', $item);

                // remove duplicates if the user already included the escape
                return preg_replace('/['.$this-&gt;_escape_char.']+/', $this-&gt;_escape_char, $str);
            }
        }

        if (strpos($item, '.') !== FALSE)
        {
            $str = $this-&gt;_escape_char.str_replace('.', $this-&gt;_escape_char.'.'.$this-&gt;_escape_char, $item).$this-&gt;_escape_char;
        }
        else
        {
            $str = $this-&gt;_escape_char.$item.$this-&gt;_escape_char;
        }

        // remove duplicates if the user already included the escape
        return preg_replace('/['.$this-&gt;_escape_char.']+/', $this-&gt;_escape_char, $str);
    }

    // --------------------------------------------------------------------

    /**
     * From Tables
     *
     * This function implicitly groups FROM tables so there is no confusion
     * about operator precedence in harmony with SQL standards
     *
     * @access    public
     * @param    type
     * @return    type
     */
    function _from_tables($tables)
    {
        if ( ! is_array($tables))
        {
            $tables = array($tables);
        }

        return '('.implode(', ', $tables).')';
    }

    // --------------------------------------------------------------------

    /**
     * Insert statement
     *
     * Generates a platform-specific insert string from the supplied data
     *
     * @access    public
     * @param    string    the table name
     * @param    array    the insert keys
     * @param    array    the insert values
     * @return    string
     */
    function _insert($table, $keys, $values)
    {
        return "INSERT INTO ".$table." (\"".implode('", "', $keys)."\") VALUES (".implode(', ', $values).")";
    }

    // --------------------------------------------------------------------


    /**
     * Replace statement
     *
     * Generates a platform-specific replace string from the supplied data
     *
     * @access    public
     * @param    string    the table name
     * @param    array    the insert keys
     * @param    array    the insert values
     * @return    string
     */
    function _replace($table, $keys, $values)
</codefragment>
  </duplication>
  <duplication lines="159" tokens="226">
    <file path="/opt/test/system/database/drivers/cubrid/cubrid_driver.php" line="625"/>
    <file path="/opt/test/system/database/drivers/mysql/mysql_driver.php" line="612"/>
    <codefragment>            $valstr[] = sprintf('"%s" = %s', $key, $val);
        }

        $limit = ( ! $limit) ? '' : ' LIMIT '.$limit;

        $orderby = (count($orderby) &gt;= 1)?' ORDER BY '.implode(", ", $orderby):'';

        $sql = "UPDATE ".$table." SET ".implode(', ', $valstr);

        $sql .= ($where != '' AND count($where) &gt;=1) ? " WHERE ".implode(" ", $where) : '';

        $sql .= $orderby.$limit;

        return $sql;
    }

    // --------------------------------------------------------------------


    /**
     * Update_Batch statement
     *
     * Generates a platform-specific batch update string from the supplied data
     *
     * @access    public
     * @param    string    the table name
     * @param    array    the update data
     * @param    array    the where clause
     * @return    string
     */
    function _update_batch($table, $values, $index, $where = NULL)
    {
        $ids = array();
        $where = ($where != '' AND count($where) &gt;=1) ? implode(" ", $where).' AND ' : '';

        foreach ($values as $key =&gt; $val)
        {
            $ids[] = $val[$index];

            foreach (array_keys($val) as $field)
            {
                if ($field != $index)
                {
                    $final[$field][] = 'WHEN '.$index.' = '.$val[$index].' THEN '.$val[$field];
                }
            }
        }

        $sql = "UPDATE ".$table." SET ";
        $cases = '';

        foreach ($final as $k =&gt; $v)
        {
            $cases .= $k.' = CASE '."\n";
            foreach ($v as $row)
            {
                $cases .= $row."\n";
            }

            $cases .= 'ELSE '.$k.' END, ';
        }

        $sql .= substr($cases, 0, -2);

        $sql .= ' WHERE '.$where.$index.' IN ('.implode(',', $ids).')';

        return $sql;
    }

    // --------------------------------------------------------------------


    /**
     * Truncate statement
     *
     * Generates a platform-specific truncate string from the supplied data
     * If the database does not support the truncate() command
     * This function maps to "DELETE FROM table"
     *
     * @access    public
     * @param    string    the table name
     * @return    string
     */
    function _truncate($table)
    {
        return "TRUNCATE ".$table;
    }

    // --------------------------------------------------------------------

    /**
     * Delete statement
     *
     * Generates a platform-specific delete string from the supplied data
     *
     * @access    public
     * @param    string    the table name
     * @param    array    the where clause
     * @param    string    the limit clause
     * @return    string
     */
    function _delete($table, $where = array(), $like = array(), $limit = FALSE)
    {
        $conditions = '';

        if (count($where) &gt; 0 OR count($like) &gt; 0)
        {
            $conditions = "\nWHERE ";
            $conditions .= implode("\n", $this-&gt;ar_where);

            if (count($where) &gt; 0 &amp;&amp; count($like) &gt; 0)
            {
                $conditions .= " AND ";
            }
            $conditions .= implode("\n", $like);
        }

        $limit = ( ! $limit) ? '' : ' LIMIT '.$limit;

        return "DELETE FROM ".$table.$conditions.$limit;
    }

    // --------------------------------------------------------------------

    /**
     * Limit string
     *
     * Generates a platform-specific LIMIT clause
     *
     * @access    public
     * @param    string    the sql query string
     * @param    integer    the number of rows to limit the query to
     * @param    integer    the offset value
     * @return    string
     */
    function _limit($sql, $limit, $offset)
    {
        if ($offset == 0)
        {
            $offset = '';
        }
        else
        {
            $offset .= ", ";
        }

        return $sql."LIMIT ".$offset.$limit;
    }

    // --------------------------------------------------------------------

    /**
     * Close DB Connection
     *
     * @access    public
     * @param    resource
     * @return    void
     */
    function _close($conn_id)
</codefragment>
  </duplication>
  <duplication lines="51" tokens="96">
    <file path="/opt/test/system/database/drivers/pdo/pdo_forge.php" line="208"/>
    <file path="/opt/test/system/database/drivers/postgre/postgre_forge.php" line="242"/>
    <codefragment>    function _alter_table($alter_type, $table, $column_name, $column_definition = '', $default_value = '', $null = '', $after_field = '')
    {
        $sql = 'ALTER TABLE '.$this-&gt;db-&gt;_protect_identifiers($table)." $alter_type ".$this-&gt;db-&gt;_protect_identifiers($column_name);

        // DROP has everything it needs now.
        if ($alter_type == 'DROP')
        {
            return $sql;
        }

        $sql .= " $column_definition";

        if ($default_value != '')
        {
            $sql .= " DEFAULT \"$default_value\"";
        }

        if ($null === NULL)
        {
            $sql .= ' NULL';
        }
        else
        {
            $sql .= ' NOT NULL';
        }

        if ($after_field != '')
        {
            $sql .= ' AFTER ' . $this-&gt;db-&gt;_protect_identifiers($after_field);
        }

        return $sql;

    }


    // --------------------------------------------------------------------

    /**
     * Rename a table
     *
     * Generates a platform-specific query so that a table can be renamed
     *
     * @access    private
     * @param    string    the old table name
     * @param    string    the new table name
     * @return    string
     */
    function _rename_table($table_name, $new_table_name)
    {
        $sql = 'ALTER TABLE '.$this-&gt;db-&gt;_protect_identifiers($table_name)." RENAME TO ".$this-&gt;db-&gt;_protect_identifiers($new_table_name);
</codefragment>
  </duplication>
  <duplication lines="101" tokens="124">
    <file path="/opt/test/system/database/drivers/mssql/mssql_driver.php" line="452"/>
    <file path="/opt/test/system/database/drivers/postgre/postgre_driver.php" line="468"/>
    <codefragment>    function _error_number()
    {
        // Are error numbers supported?
        return '';
    }

    // --------------------------------------------------------------------

    /**
     * Escape the SQL Identifiers
     *
     * This function escapes column and table names
     *
     * @access    private
     * @param    string
     * @return    string
     */
    function _escape_identifiers($item)
    {
        if ($this-&gt;_escape_char == '')
        {
            return $item;
        }

        foreach ($this-&gt;_reserved_identifiers as $id)
        {
            if (strpos($item, '.'.$id) !== FALSE)
            {
                $str = $this-&gt;_escape_char. str_replace('.', $this-&gt;_escape_char.'.', $item);

                // remove duplicates if the user already included the escape
                return preg_replace('/['.$this-&gt;_escape_char.']+/', $this-&gt;_escape_char, $str);
            }
        }

        if (strpos($item, '.') !== FALSE)
        {
            $str = $this-&gt;_escape_char.str_replace('.', $this-&gt;_escape_char.'.'.$this-&gt;_escape_char, $item).$this-&gt;_escape_char;
        }
        else
        {
            $str = $this-&gt;_escape_char.$item.$this-&gt;_escape_char;
        }

        // remove duplicates if the user already included the escape
        return preg_replace('/['.$this-&gt;_escape_char.']+/', $this-&gt;_escape_char, $str);
    }

    // --------------------------------------------------------------------

    /**
     * From Tables
     *
     * This function implicitly groups FROM tables so there is no confusion
     * about operator precedence in harmony with SQL standards
     *
     * @access    public
     * @param    type
     * @return    type
     */
    function _from_tables($tables)
    {
        if ( ! is_array($tables))
        {
            $tables = array($tables);
        }

        return implode(', ', $tables);
    }

    // --------------------------------------------------------------------

    /**
     * Insert statement
     *
     * Generates a platform-specific insert string from the supplied data
     *
     * @access    public
     * @param    string    the table name
     * @param    array    the insert keys
     * @param    array    the insert values
     * @return    string
     */
    function _insert($table, $keys, $values)
    {
        return "INSERT INTO ".$table." (".implode(', ', $keys).") VALUES (".implode(', ', $values).")";
    }

    // --------------------------------------------------------------------

    /**
     * Update statement
     *
     * Generates a platform-specific update string from the supplied data
     *
     * @access    public
     * @param    string    the table name
     * @param    array    the update data
     * @param    array    the where clause
     * @param    array    the orderby clause
     * @param    array    the limit clause
</codefragment>
  </duplication>
  <duplication lines="72" tokens="96">
    <file path="/opt/test/system/database/drivers/pdo/pdo_driver.php" line="588"/>
    <file path="/opt/test/system/database/drivers/postgre/postgre_driver.php" line="550"/>
    <codefragment>    function _insert($table, $keys, $values)
    {
        return "INSERT INTO ".$table." (".implode(', ', $keys).") VALUES (".implode(', ', $values).")";
    }
    
    // --------------------------------------------------------------------

    /**
     * Insert_batch statement
     *
     * Generates a platform-specific insert string from the supplied data
     *
     * @access  public
     * @param   string  the table name
     * @param   array   the insert keys
     * @param   array   the insert values
     * @return  string
     */
    function _insert_batch($table, $keys, $values)
    {
        return "INSERT INTO ".$table." (".implode(', ', $keys).") VALUES ".implode(', ', $values);
    }

    // --------------------------------------------------------------------

    /**
     * Update statement
     *
     * Generates a platform-specific update string from the supplied data
     *
     * @access    public
     * @param    string    the table name
     * @param    array    the update data
     * @param    array    the where clause
     * @param    array    the orderby clause
     * @param    array    the limit clause
     * @return    string
     */
    function _update($table, $values, $where, $orderby = array(), $limit = FALSE)
    {
        foreach ($values as $key =&gt; $val)
        {
            $valstr[] = $key." = ".$val;
        }

        $limit = ( ! $limit) ? '' : ' LIMIT '.$limit;

        $orderby = (count($orderby) &gt;= 1)?' ORDER BY '.implode(", ", $orderby):'';

        $sql = "UPDATE ".$table." SET ".implode(', ', $valstr);

        $sql .= ($where != '' AND count($where) &gt;=1) ? " WHERE ".implode(" ", $where) : '';

        $sql .= $orderby.$limit;

        return $sql;
    }
    
    // --------------------------------------------------------------------

    /**
     * Update_Batch statement
     *
     * Generates a platform-specific batch update string from the supplied data
     *
     * @access    public
     * @param    string    the table name
     * @param    array    the update data
     * @param    array    the where clause
     * @return    string
     */
    function _update_batch($table, $values, $index, $where = NULL)
</codefragment>
  </duplication>
  <duplication lines="85" tokens="127">
    <file path="/opt/test/system/database/drivers/mssql/mssql_driver.php" line="555"/>
    <file path="/opt/test/system/database/drivers/postgre/postgre_driver.php" line="588"/>
    <codefragment>    function _update($table, $values, $where, $orderby = array(), $limit = FALSE)
    {
        foreach ($values as $key =&gt; $val)
        {
            $valstr[] = $key." = ".$val;
        }

        $limit = ( ! $limit) ? '' : ' LIMIT '.$limit;

        $orderby = (count($orderby) &gt;= 1)?' ORDER BY '.implode(", ", $orderby):'';

        $sql = "UPDATE ".$table." SET ".implode(', ', $valstr);

        $sql .= ($where != '' AND count($where) &gt;=1) ? " WHERE ".implode(" ", $where) : '';

        $sql .= $orderby.$limit;

        return $sql;
    }


    // --------------------------------------------------------------------

    /**
     * Truncate statement
     *
     * Generates a platform-specific truncate string from the supplied data
     * If the database does not support the truncate() command
     * This function maps to "DELETE FROM table"
     *
     * @access    public
     * @param    string    the table name
     * @return    string
     */
    function _truncate($table)
    {
        return "TRUNCATE ".$table;
    }

    // --------------------------------------------------------------------

    /**
     * Delete statement
     *
     * Generates a platform-specific delete string from the supplied data
     *
     * @access    public
     * @param    string    the table name
     * @param    array    the where clause
     * @param    string    the limit clause
     * @return    string
     */
    function _delete($table, $where = array(), $like = array(), $limit = FALSE)
    {
        $conditions = '';

        if (count($where) &gt; 0 OR count($like) &gt; 0)
        {
            $conditions = "\nWHERE ";
            $conditions .= implode("\n", $this-&gt;ar_where);

            if (count($where) &gt; 0 &amp;&amp; count($like) &gt; 0)
            {
                $conditions .= " AND ";
            }
            $conditions .= implode("\n", $like);
        }

        $limit = ( ! $limit) ? '' : ' LIMIT '.$limit;

        return "DELETE FROM ".$table.$conditions.$limit;
    }

    // --------------------------------------------------------------------

    /**
     * Limit string
     *
     * Generates a platform-specific LIMIT clause
     *
     * @access    public
     * @param    string    the sql query string
     * @param    integer    the number of rows to limit the query to
     * @param    integer    the offset value
     * @return    string
</codefragment>
  </duplication>
  <duplication lines="89" tokens="83">
    <file path="/opt/test/system/database/drivers/mysqli/mysqli_driver.php" line="677"/>
    <file path="/opt/test/system/database/drivers/postgre/postgre_driver.php" line="605"/>
    <codefragment>        return $sql;
    }

    // --------------------------------------------------------------------

    /**
     * Truncate statement
     *
     * Generates a platform-specific truncate string from the supplied data
     * If the database does not support the truncate() command
     * This function maps to "DELETE FROM table"
     *
     * @access    public
     * @param    string    the table name
     * @return    string
     */
    function _truncate($table)
    {
        return "TRUNCATE ".$table;
    }

    // --------------------------------------------------------------------

    /**
     * Delete statement
     *
     * Generates a platform-specific delete string from the supplied data
     *
     * @access    public
     * @param    string    the table name
     * @param    array    the where clause
     * @param    string    the limit clause
     * @return    string
     */
    function _delete($table, $where = array(), $like = array(), $limit = FALSE)
    {
        $conditions = '';

        if (count($where) &gt; 0 OR count($like) &gt; 0)
        {
            $conditions = "\nWHERE ";
            $conditions .= implode("\n", $this-&gt;ar_where);

            if (count($where) &gt; 0 &amp;&amp; count($like) &gt; 0)
            {
                $conditions .= " AND ";
            }
            $conditions .= implode("\n", $like);
        }

        $limit = ( ! $limit) ? '' : ' LIMIT '.$limit;

        return "DELETE FROM ".$table.$conditions.$limit;
    }

    // --------------------------------------------------------------------

    /**
     * Limit string
     *
     * Generates a platform-specific LIMIT clause
     *
     * @access    public
     * @param    string    the sql query string
     * @param    integer    the number of rows to limit the query to
     * @param    integer    the offset value
     * @return    string
     */
    function _limit($sql, $limit, $offset)
    {
        $sql .= "LIMIT ".$limit;

        if ($offset &gt; 0)
        {
            $sql .= " OFFSET ".$offset;
        }

        return $sql;
    }

    // --------------------------------------------------------------------

    /**
     * Close DB Connection
     *
     * @access    public
     * @param    resource
     * @return    void
     */
</codefragment>
  </duplication>
  <duplication lines="218" tokens="308">
    <file path="/opt/test/system/database/drivers/mssql/mssql_forge.php" line="25"/>
    <file path="/opt/test/system/database/drivers/sqlsrv/sqlsrv_forge.php" line="25"/>
    <codefragment>class CI_DB_mssql_forge extends CI_DB_forge {

    /**
     * Create database
     *
     * @access    private
     * @param    string    the database name
     * @return    bool
     */
    function _create_database($name)
    {
        return "CREATE DATABASE ".$name;
    }

    // --------------------------------------------------------------------

    /**
     * Drop database
     *
     * @access    private
     * @param    string    the database name
     * @return    bool
     */
    function _drop_database($name)
    {
        return "DROP DATABASE ".$name;
    }

    // --------------------------------------------------------------------

    /**
     * Drop Table
     *
     * @access    private
     * @return    bool
     */
    function _drop_table($table)
    {
        return "DROP TABLE ".$this-&gt;db-&gt;_escape_identifiers($table);
    }

    // --------------------------------------------------------------------

    /**
     * Create Table
     *
     * @access    private
     * @param    string    the table name
     * @param    array    the fields
     * @param    mixed    primary key(s)
     * @param    mixed    key(s)
     * @param    boolean    should 'IF NOT EXISTS' be added to the SQL
     * @return    bool
     */
    function _create_table($table, $fields, $primary_keys, $keys, $if_not_exists)
    {
        $sql = 'CREATE TABLE ';

        if ($if_not_exists === TRUE)
        {
            $sql .= 'IF NOT EXISTS ';
        }

        $sql .= $this-&gt;db-&gt;_escape_identifiers($table)." (";
        $current_field_count = 0;

        foreach ($fields as $field=&gt;$attributes)
        {
            // Numeric field names aren't allowed in databases, so if the key is
            // numeric, we know it was assigned by PHP and the developer manually
            // entered the field information, so we'll simply add it to the list
            if (is_numeric($field))
            {
                $sql .= "\n\t$attributes";
            }
            else
            {
                $attributes = array_change_key_case($attributes, CASE_UPPER);

                $sql .= "\n\t".$this-&gt;db-&gt;_protect_identifiers($field);

                $sql .=  ' '.$attributes['TYPE'];

                if (array_key_exists('CONSTRAINT', $attributes))
                {
                    $sql .= '('.$attributes['CONSTRAINT'].')';
                }

                if (array_key_exists('UNSIGNED', $attributes) &amp;&amp; $attributes['UNSIGNED'] === TRUE)
                {
                    $sql .= ' UNSIGNED';
                }

                if (array_key_exists('DEFAULT', $attributes))
                {
                    $sql .= ' DEFAULT \''.$attributes['DEFAULT'].'\'';
                }

                if (array_key_exists('NULL', $attributes) &amp;&amp; $attributes['NULL'] === TRUE)
                {
                    $sql .= ' NULL';
                }
                else
                {
                    $sql .= ' NOT NULL';
                }

                if (array_key_exists('AUTO_INCREMENT', $attributes) &amp;&amp; $attributes['AUTO_INCREMENT'] === TRUE)
                {
                    $sql .= ' AUTO_INCREMENT';
                }
            }

            // don't add a comma on the end of the last field
            if (++$current_field_count &lt; count($fields))
            {
                $sql .= ',';
            }
        }

        if (count($primary_keys) &gt; 0)
        {
            $primary_keys = $this-&gt;db-&gt;_protect_identifiers($primary_keys);
            $sql .= ",\n\tPRIMARY KEY (" . implode(', ', $primary_keys) . ")";
        }

        if (is_array($keys) &amp;&amp; count($keys) &gt; 0)
        {
            foreach ($keys as $key)
            {
                if (is_array($key))
                {
                    $key = $this-&gt;db-&gt;_protect_identifiers($key);
                }
                else
                {
                    $key = array($this-&gt;db-&gt;_protect_identifiers($key));
                }

                $sql .= ",\n\tFOREIGN KEY (" . implode(', ', $key) . ")";
            }
        }

        $sql .= "\n)";

        return $sql;
    }

    // --------------------------------------------------------------------

    /**
     * Alter table query
     *
     * Generates a platform-specific query so that a table can be altered
     * Called by add_column(), drop_column(), and column_alter(),
     *
     * @access    private
     * @param    string    the ALTER type (ADD, DROP, CHANGE)
     * @param    string    the column name
     * @param    string    the table name
     * @param    string    the column definition
     * @param    string    the default value
     * @param    boolean    should 'NOT NULL' be added
     * @param    string    the field after which we should add the new field
     * @return    object
     */
    function _alter_table($alter_type, $table, $column_name, $column_definition = '', $default_value = '', $null = '', $after_field = '')
    {
        $sql = 'ALTER TABLE '.$this-&gt;db-&gt;_protect_identifiers($table)." $alter_type ".$this-&gt;db-&gt;_protect_identifiers($column_name);

        // DROP has everything it needs now.
        if ($alter_type == 'DROP')
        {
            return $sql;
        }

        $sql .= " $column_definition";

        if ($default_value != '')
        {
            $sql .= " DEFAULT \"$default_value\"";
        }

        if ($null === NULL)
        {
            $sql .= ' NULL';
        }
        else
        {
            $sql .= ' NOT NULL';
        }

        if ($after_field != '')
        {
            $sql .= ' AFTER ' . $this-&gt;db-&gt;_protect_identifiers($after_field);
        }

        return $sql;

    }

    // --------------------------------------------------------------------

    /**
     * Rename a table
     *
     * Generates a platform-specific query so that a table can be renamed
     *
     * @access    private
     * @param    string    the old table name
     * @param    string    the new table name
     * @return    string
     */
    function _rename_table($table_name, $new_table_name)
    {
        // I think this syntax will work, but can find little documentation on renaming tables in MSSQL
        $sql = 'ALTER TABLE '.$this-&gt;db-&gt;_protect_identifiers($table_name)." RENAME TO ".$this-&gt;db-&gt;_protect_identifiers($new_table_name);
        return $sql;
</codefragment>
  </duplication>
  <duplication lines="9" tokens="72">
    <file path="/opt/test/system/libraries/Email.php" line="1057"/>
    <file path="/opt/test/system/libraries/Email.php" line="1119"/>
    <codefragment>                    $body .= $this-&gt;_get_mime_message() . $this-&gt;newline . $this-&gt;newline;
                    $body .= "--" . $this-&gt;_alt_boundary . $this-&gt;newline;

                    $body .= "Content-Type: text/plain; charset=" . $this-&gt;charset . $this-&gt;newline;
                    $body .= "Content-Transfer-Encoding: " . $this-&gt;_get_encoding() . $this-&gt;newline . $this-&gt;newline;
                    $body .= $this-&gt;_get_alt_message() . $this-&gt;newline . $this-&gt;newline . "--" . $this-&gt;_alt_boundary . $this-&gt;newline;

                    $body .= "Content-Type: text/html; charset=" . $this-&gt;charset . $this-&gt;newline;
                    $body .= "Content-Transfer-Encoding: quoted-printable" . $this-&gt;newline . $this-&gt;newline;
</codefragment>
  </duplication>
</pmd-cpd>
